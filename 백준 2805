#파이썬 (시간초과로 pyp3로 하게 되면 풀린다.)
N, M = map(int, input().split())
tree = list(map(int, input().split()))
start = 0
end = max(tree)
while(start<=end):  #반복문을 통해 end가 start 보다 작아지는 값이 정답이므로 이를 고려해 범위를 설정해야한다 .
  mid = (start+end)//2
  count = 0
  for i in tree:
    if i>=mid:
      count += i-mid
  if count>=M:
      start = mid + 1 #mid 를 높이기 위해 
  else:
    end = mid - 1 #mid 를 낮추기 위해 
print(end) 

#결국은 end값과 satrt 값이 같아 지는 경우가 생긴다. 그 경우 아마도 정답과 M값은 1차이 날것이다 . 이에 end = mid -1 을 할경우 start 보다 작아지게 되면서 반복문이 
#break 된다. 그 end 값이 정답이 된다.
#이분탐색 문제인데 좀더 생각을 했어야 했다. 

//c++
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int n, m;
vector<int> tree;

int main() {
	cin >> n >> m;
	for (long long int i = 0; i < n; i++) { 
		int x; 
		cin >> x; 
		tree.push_back(x); 
	}
	int start = 0;
	int end = *max_element(tree.begin(), tree.end());
	int result = 0;
	while (start <= end) {
		long long int count = 0;
		int mid = (start + end) / 2;
		for (long long int i = 0; i < n; i++) {
			if (tree[i] > mid)
				count += tree[i] - mid;
		}
		if (count >= m)
			start = mid + 1;
		else
			end = mid - 1;
		

	}
	cout << end;
}

//간단하게 생각해보면 vector에 집어 넣어주고 STL algorithm 에 *max_element()를 통해 초기 end 값을 설정하여 이분탐색해가는 과정이다.
//뒤에 코드는 파이썬 코드랑 동일하다 .
