#파이썬
def bst(i,start,end):
    if start>end :             #처음에는 i가 a에 입력받은 수보다 작으면 반례가 생기는게 아닌가 했는데 그렇게되면 결국은 end = -1 이되어 start 의 최소값 0보다 작아지게된다.
        return 0
    mid = (start+end) // 2      #기준점이되는 mid는 입력받는 b의 정중앙이다 .
    if i == a[mid]:
        return 1
    elif i >a[mid]:
        return bst(i,mid+1,end)   #결국은 mid의 값을 추리기위해 start 와 end 에 1을 더해주고 뺴주는거다 .
    elif i<a[mid]:
        return bst(i,start,mid-1)
n = int(input())
a = list(map(int,input().split()))
a.sort()

m = int(input())
b = list(map(int,input().split()))

for i in b:
    start = 0
    end = n-1
    print(bst(i,start,end))
# 이 문제는 쫌 많이 힘들었다 .. 
#bst를 이용해서 푸는게 좋다 . bst를 간략하게 설명하면 두개를 비교 하는건데 반으로 줄여나가면서 게속해서 비교하는 문제다 .

#파이썬 시간초과 풀이 
n = int(input())
result = list(map(int,input().split()))
m = int(input())
result1 = list(map(int,input().split()))
for i in range(m):
    if result1[i] in result:  #순서 주의 
        print(1)
    else:
        print(0)
#간단하게 생각했던 문제가 시간초과를 하였 다시 풀었다. 주의!

//c++
#include<iostream>
#include<algorithm>
#define max 100000	//1 ≤ n,m ≤ 100,000 

using namespace std;
int n, m;
int arr[max];
void bst(int result) {	//void 를 통해 return 시간을 줄여준다 .
	int start = 0;
	int end = n - 1;
	int mid;
	while (start <= end) {
		mid = (start + end) / 2;
		if (arr[mid] == result) {
			cout << 1 << "\n";
			return  ;	//return 을 통해 반복문을 종료해준다
	}
		else if (arr[mid] > result) {
			end = mid - 1;
		}
		else {
			start = mid + 1;
		}

	}
	cout << 0<<"\n";
	
}
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0); //출력 시간을 줄이기위해
	cin >> n;
	int temp; //임시로 받아주는 값. 임시기 때문에 게속 입력받아도 된다. 
	for (int i = 0; i < n; i++) {
		cin >> temp;
		arr[i] = temp;
	}
	sort(arr, arr + n);

	cin >> m;
	for (int i = 0; i < m; i++) {
		cin >> temp;
		bst(temp);
	}
	return 0;
}
	




